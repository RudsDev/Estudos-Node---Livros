**Gerenciamento de callbacks e eventos assíncronos no Node

	O JS é single-threaded. O que siginifica que ele é executado linha por linha até o final da aplicação. 
	Por ser baseado em JS, o Node herda esse comportamento síncrono de uma única thread.
	Se for necessário  que alguma funcionalidade que  espere que algo aconteça, uma abertura de arquivo por exemplo,
	a aplicação ficaria bloqueada até que tal operação termine de ser processada. 
	A solução para evitar o bloqueio é o event loop.


** Event loop

	O Node (e também o JS que roda nos navegadores) adota uma arquitetura baseada em eventos para oferecer a 
	funcionalidade assíncrona. Quando um processo que consome tempo é invocado a aplicação não espera 
	que ele termine, ao invés disso o processo avisa quando estiver sido concluído através de um sinal de evento. 
	Esse evento é adicionado  à fila de eventos (event loop). Qualquer funcionalidade que tenha interesse em 
	determinado evento registra seu interesse nele e quando o mesmo é retirado do event loop e processado a 
	funcionalidade dependente (que registrou seu interesse no evento) é chamada e os dados relacionados ao evento 
	são passados a ela. Uma analogia simples seria a situação em que um usuário do Facebook diz que tem interesse 
	em determinado evento e passa a receber notificações sobre ele. 
	O Node tem seu próprio laço de eventos, esse laço é utilizado para facilitar funcionalidades de servidor, em sua 
	maioria de entrada e saída(I/O), como por exemplo, eventos de aberturas de arquivos e solicitações web vindas de 
	um usuário ou até mesmo de outro sistema. Esses tipos de processo consomem uma grande quantidade de recursos 
	além de consumir bastante tempo de processamento. O acesso a um recurso geralmente o bloqueia impedindo que outros
	processos o acessem até que o processo original( o primeiro que acessou o recurso) tenha sido finalizado. 
	Aplicações web são especialmente afetadas por esse tipo de comportamento pois dependem da iteração de usuários ou 
	de outros sistemas, o que gera uma maior aleatoriedade de acesso a determinados recursos.

	"O Node processa todos os eventos da fila em ordem. Quando chegar ao evento em que você esta interessado, chama a 
	função de callback informada e passa a ela qualquer informação associada ao evento." 
	
